"""game_demos_gallery.py

üéÆ Interactive Game Demo Gallery

A marimo showcase of award-ready indie game concepts generated by parallel Codex
agents. This gallery merges four independent explorations into a unified,
explorable interface demonstrating the power of literate programming for
interactive design documentation.

Provenance: Created 2025-09-29 to unify four parallel Codex branches exploring
festival-ready game demo concepts.
"""

import marimo

__generated_with__ = "0.9.16"
app = marimo.App(width="full")


@app.cell
def __():
    import marimo as mo
    return mo,


@app.cell
def __(mo):
    mo.md("""
    # üå± Dream Demo Gallery

    **Four Parallel Visions from the Literate Garden**

    This interactive showcase merges four independent explorations by Codex agents,
    each imagining award-ready indie game concepts. Navigate between collections to
    explore different creative directions‚Äîfrom intimate narrative puzzles to
    experimental interaction patterns.

    ---

    ## The Four Collections

    Each collection represents a parallel branch of creative exploration:

    1. **üå∏ Bloom Collection** ‚Äî Intimate, nature-themed concepts with innovative mechanics
    2. **‚öôÔ∏è Clockwork Collection** ‚Äî Technical showcases and systems-driven experiences
    3. **üèõÔ∏è Palimpsest Collection** ‚Äî Narrative-forward, memory-themed concepts
    4. **üé® Pattern Library** ‚Äî Distilled interaction patterns ready for prototyping

    ---
    """)
    return


@app.cell
def __(mo):
    # Create tabs for each collection
    collection_tabs = mo.ui.tabs({
        "üå∏ Bloom": mo.md("Loading Bloom Collection..."),
        "‚öôÔ∏è Clockwork": mo.md("Loading Clockwork Collection..."),
        "üèõÔ∏è Palimpsest": mo.md("Loading Palimpsest Collection..."),
        "üé® Patterns": mo.md("Loading Pattern Library..."),
        "üìä Overview": mo.md("Loading Overview..."),
    })
    return collection_tabs,


@app.cell
def __(mo):
    # Bloom Collection (from branch 1: codex/document-game-demo-concepts-and-feasibility)
    bloom_concepts = [
        {
            "name": "Chrono Bloom Conservatory",
            "fantasy": "A living botanical timepiece where flora respond to temporal puzzles and music-based growth cues",
            "mechanic": "Players conduct a symphony of seasons, scrubbing time forward/backward to orchestrate plant evolution",
            "suitability": "Ideal for narrative puzzle showcases celebrating synesthetic mechanics",
            "tech": "Spline-based plant animation, audio-reactive shaders (Unreal/Unity timeline)",
            "timeline": "8-10 weeks with 3-person pod",
            "demo_hook": "Interactive terrarium with three timed growth challenges and adaptive music loops",
        },
        {
            "name": "Luminous Threadbreakers",
            "fantasy": "Rogue-weaver heroes stitching constellations to mend a fractured night sky",
            "mechanic": "Thread-slingshot traversal that knots patterns into enemy weaknesses while reweaving celestial maps",
            "suitability": "Tactile traversal + pattern-matching‚Äîstrong for festivals seeking kinetic artistry",
            "tech": "Godot rope physics, signed-distance-field rendering, UI overlays for patterns",
            "timeline": "6 weeks web demo; 4 months console pitch",
            "demo_hook": "Timed constellation rescue with leaderboard pattern efficiency scoring",
        },
        {
            "name": "Emberwake Courier Guild",
            "fantasy": "Ember-powered courier racing across volcanic archipelagos to deliver stories before they fade",
            "mechanic": "Momentum surfing over magma jets, chaining deliveries to keep narrative embers alight",
            "suitability": "Blends momentum puzzles with emotional cargo‚Äînarrative + mechanics award tracks",
            "tech": "Unity spline racing, heat-haze post-processing, VO narrative cards",
            "timeline": "4 weeks greybox; 6 weeks stylized art pass",
            "demo_hook": "Split-route challenge juggling cargo stability and branching narrative timers",
        },
    ]

    def render_concept_card(concept):
        return mo.md(f"""
        ### {concept['name']}

        **Core Fantasy:** {concept['fantasy']}

        **Signature Mechanic:** {concept['mechanic']}

        **Why This Works for Awards:**
        {concept['suitability']}

        **Technical Approach:**
        {concept['tech']}

        **Timeline:** {concept['timeline']}

        **Demo Hook:** _{concept['demo_hook']}_

        ---
        """)

    bloom_collection_content = mo.vstack([
        mo.md("""
        ## üå∏ Bloom Collection

        Three botanical and celestial concepts emphasizing **synesthetic mechanics**
        and **emotional resonance**. These demos prioritize tactile interaction and
        adaptive storytelling.
        """),
        *[render_concept_card(c) for c in bloom_concepts]
    ])
    return bloom_collection_content, bloom_concepts, render_concept_card


@app.cell
def __(mo):
    # Clockwork Collection (from branch 2: ...o0t591)
    clockwork_concepts = [
        {
            "name": "Aurora Chord Pilgrimage",
            "premise": "A synth-driven pilgrimage across frozen skylines where constellations respond to musical harmony",
            "systems": [
                "Freeform constellation drawing mapping to chord progressions",
                "Traveling set pieces with harmony-modulated weather and traversal",
                "Score based on emotional resonance, dynamic NPC feedback"
            ],
            "suitability": "Music theory + narrative pilgrimage fusion; auroras + starlines photograph beautifully",
            "feasibility": "Web demo with shader-free gradients and harmony feedback; full game needs audio middleware",
        },
        {
            "name": "Clockwork Canopy Atelier",
            "premise": "An arboreal city whose clockwork flora must be tuned daily to keep the canopy alive",
            "systems": [
                "Layered time-of-day puzzles with rotating branches redirecting sunlight",
                "NPC artisans requesting custom gear-based flora adjustments",
                "Persistent ecology responding to over/under tuning"
            ],
            "suitability": "Steampunk-botanical art direction; systems depth for emergent problem solving",
            "feasibility": "Demo shows parallax canopy management; deeper simulation needs lightweight systems scripting",
        },
        {
            "name": "Tidebound Cartographer",
            "premise": "Charting a living coastline where tides reveal or erase the truth of ancient civilizations",
            "systems": [
                "Tidal rhythm puzzles: align relics before they submerge",
                "Narrative mapping where each charted layer affects future expeditions",
                "Local co-op: one controls tides, one explores ruins"
            ],
            "suitability": "Co-op asymmetry and environmental storytelling",
            "feasibility": "Web prototype for tidal mechanics; co-op needs networking consideration",
        },
    ]

    def render_clockwork_card(concept):
        systems_list = "\n".join([f"- {s}" for s in concept['systems']])
        return mo.md(f"""
        ### {concept['name']}

        **Premise:** {concept['premise']}

        **Core Systems:**
        {systems_list}

        **Festival Appeal:**
        {concept['suitability']}

        **Feasibility:**
        {concept['feasibility']}

        ---
        """)

    clockwork_collection_content = mo.vstack([
        mo.md("""
        ## ‚öôÔ∏è Clockwork Collection

        Three **systems-driven** concepts emphasizing emergent behavior and technical
        depth. These demos showcase sophisticated simulation and multiplayer coordination.
        """),
        *[render_clockwork_card(c) for c in clockwork_concepts]
    ])
    return (
        clockwork_collection_content,
        clockwork_concepts,
        render_clockwork_card,
    )


@app.cell
def __(mo):
    # Palimpsest Collection (from branch 3: ...w2pizk)
    palimpsest_concepts = [
        {
            "name": "Lighthouse Palimpsest",
            "premise": "A memory-forging narrative where players rotate a brass lighthouse to layer timelines and solve spectral cartography puzzles",
            "loop": [
                "Align lighthouse lenses to project overlapping eras",
                "Decode ghostly annotations to unlock forgotten sea routes",
                "Preserve or rewrite history to rescue shipwrecked crews"
            ],
            "suitability": "üåüüåüüåüüåü ‚Äî Atmospheric, narrative-forward; resonates at IGF and Day of the Devs",
            "feasibility": "‚öôÔ∏è‚öôÔ∏è ‚Äî Custom shader work for layered projections; controllable art scope with stylized assets",
            "hook": "What if you could rotate a lighthouse and literally change the past to save lost mariners?",
        },
        {
            "name": "MetroMycelium",
            "premise": "A bioluminescent transit sim where fungal networks replace subway lines beneath a neon eco-city",
            "loop": [
                "Cultivate mycelial routes to balance commuter flow",
                "Respond to environmental stressors (drought, pollution, festivals)",
                "Harvest narrative snippets from commuters who co-create the network"
            ],
            "suitability": "üåüüåüüåü ‚Äî Systems-forward yet visually unique; experimental showcase fit",
            "feasibility": "‚öôÔ∏è‚öôÔ∏è‚öôÔ∏è ‚Äî Performant pathfinding and reactive storytelling; Godot tile-based graphs work",
            "hook": "Grow a glowing subway under the city, and the riders tell the story back to you",
        },
        {
            "name": "Echoes of Laurel Vault",
            "premise": "Rhythm-combat meets botanical caretaking; each beat sprouts defenses in an ancient arboretum",
            "loop": [
                "Sync percussion patterns with enemy waves",
                "Plant defensive flora that harmonize with the beat",
                "Unlock lore fragments through perfect sequences"
            ],
            "suitability": "üåüüåüüåüüåü ‚Äî Hybrid of rhythm and strategy; media-friendly, 10-minute demo slots",
            "feasibility": "‚öôÔ∏è‚öôÔ∏è ‚Äî Rhythm engine integration straightforward; procedural plant growth needs tuning",
            "hook": "Defend an ancient garden by drumming plants into existence",
        },
    ]

    def render_palimpsest_card(concept):
        loop_list = "\n".join([f"{i+1}. {s}" for i, s in enumerate(concept['loop'])])
        return mo.md(f"""
        ### {concept['name']}

        **Premise:** {concept['premise']}

        **Core Loop:**
        {loop_list}

        **Suitability:** {concept['suitability']}
        **Feasibility:** {concept['feasibility']}

        **Elevator Pitch:** _{concept['hook']}_

        ---
        """)

    palimpsest_collection_content = mo.vstack([
        mo.md("""
        ## üèõÔ∏è Palimpsest Collection

        Three **narrative-forward** concepts emphasizing memory, layering, and
        historical rewriting. These demos excel at atmospheric storytelling and
        emotional hooks.
        """),
        *[render_palimpsest_card(c) for c in palimpsest_concepts]
    ])
    return (
        palimpsest_collection_content,
        palimpsest_concepts,
        render_palimpsest_card,
    )


@app.cell
def __(mo):
    # Pattern Library (from branch 4: ...7jqoyo)
    pattern_library = [
        {
            "name": "Rhythmic Environmental Tuning",
            "source": "Clockwork Skylark",
            "description": "Let players 'conduct' the world with rhythmic input",
            "appeal": "Works excellently with haptic controllers; tangible world manipulation",
            "applications": ["Weather control", "Plant growth timing", "Musical puzzles"],
        },
        {
            "name": "Diegetic Journaling UI",
            "source": "Nocturne Cartographers",
            "description": "Collapse menu friction by making the interface part of the world",
            "appeal": "Sells narrative cohesion; reduces cognitive load",
            "applications": ["Dream journals", "Field notes", "Spell books"],
        },
        {
            "name": "Procedural Growth as Feedback",
            "source": "Bloom//Breaker",
            "description": "Visually communicate strategic mastery through real-time growth",
            "appeal": "Strategic success visible in seconds; naturally beautiful",
            "applications": ["Garden combat", "Territory control", "Skill trees"],
        },
    ]

    full_concepts_table = [
        {
            "name": "Clockwork Skylark",
            "pitch": "Solarpunk sky-harvesting adventure tuning mechanical birds to change weather over floating biomes",
            "mechanic": "Rhythmic gliding rewinding wind currents to expose hidden routes",
            "festivals": "IndieCade (Innovation), IGF Nuovo",
        },
        {
            "name": "Nocturne Cartographers",
            "pitch": "Cozy horror journaling game mapping dreams before dawn erases them",
            "mechanic": "Sketch constellations that become puzzle keys on a ticking clock",
            "festivals": "LudoNarraCon, Day of the Devs",
        },
        {
            "name": "Bloom//Breaker",
            "pitch": "Competitive gardening roguelike where seeds are spells and arenas bloom in real time",
            "mechanic": "Deck-building growth cycles that literally reshape the battlefield",
            "festivals": "SXSW Gaming Awards, MIX",
        },
        {
            "name": "Echoes of the Tidelocked",
            "pitch": "Time-looping co-op puzzler on a stranded research vessel",
            "mechanic": "Asymmetric roles: one manipulates ocean tides, other reconfigures circuitry",
            "festivals": "BAFTA Games (Multiplayer), IGF Excellence in Design",
        },
        {
            "name": "Wavelength Wardens",
            "pitch": "Audio-driven tower defense orchestrating frequencies to repel cosmic storms",
            "mechanic": "Compose harmonies that manifest as defensive structures",
            "festivals": "A MAZE., AMAZE XR",
        },
    ]

    def render_pattern_card(pattern):
        apps_list = ", ".join(pattern['applications'])
        return mo.md(f"""
        ### {pattern['name']}

        **Origin:** _{pattern['source']}_

        {pattern['description']}

        **Why It Works:** {pattern['appeal']}

        **Applications:** {apps_list}

        ---
        """)

    pattern_library_content = mo.vstack([
        mo.md("""
        ## üé® Interaction Pattern Library

        Distilled patterns ready for **immediate prototyping**. These mechanics emerged
        as especially demo-friendly across multiple concept explorations.

        ### Core Patterns
        """),
        *[render_pattern_card(p) for p in pattern_library],
        mo.md("""
        ### Full Concept Reference Table

        Quick reference for the complete slate of festival-targeted concepts:
        """),
        mo.ui.table(
            full_concepts_table,
            selection=None,
        ),
    ])
    return (
        full_concepts_table,
        pattern_library,
        pattern_library_content,
        render_pattern_card,
    )


@app.cell
def __(mo):
    # Overview and Statistics
    overview_content = mo.vstack([
        mo.md("""
        ## üìä Gallery Overview

        ### The Experiment

        Four independent Codex agents explored "award-ready indie game demo concepts"
        in parallel branches. Each agent developed:

        - Concept documentation with feasibility analysis
        - Interactive HTML prototypes
        - Collaboration breadcrumbs for async teams

        This gallery **merges all four visions** into a unified, explorable showcase‚Äî
        demonstrating how literate programming can coordinate parallel creative exploration.

        ---

        ### Statistics Across Collections
        """),
        mo.ui.table([
            {"Collection": "üå∏ Bloom", "Concepts": 3, "Focus": "Synesthetic mechanics, emotional resonance"},
            {"Collection": "‚öôÔ∏è Clockwork", "Concepts": 3, "Focus": "Systems depth, emergent behavior"},
            {"Collection": "üèõÔ∏è Palimpsest", "Concepts": 3, "Focus": "Narrative layering, memory themes"},
            {"Collection": "üé® Patterns", "Concepts": 8, "Focus": "Reusable interaction patterns"},
            {"Collection": "**Total**", "Concepts": "**17**", "Focus": "**Festival-ready prototypes**"},
        ], selection=None),
        mo.md("""
        ---

        ### Design Philosophy

        All concepts share common traits optimized for **festival submissions**:

        - **üéØ Clear hooks** ‚Äî Elevator pitches that land with juries
        - **‚ö° Rapid prototyping** ‚Äî Achievable vertical slices in 4-10 weeks
        - **üé® Visual distinctiveness** ‚Äî Concepts that photograph and stream well
        - **üîß Technical feasibility** ‚Äî Explicit tool recommendations and blockers
        - **ü§ù Async collaboration** ‚Äî Breadcrumbs for parallel contributors

        ---

        ### Untangling Strategy

        **Challenge:** Four branches modified `README.md` and created overlapping web directories.

        **Solution:** This marimo gallery:
        1. **Unifies content** without losing any creative work
        2. **Provides navigation** across all collections
        3. **Preserves provenance** of each concept's origin
        4. **Enables side-by-side comparison** of different approaches
        5. **Demonstrates literate programming** for design documentation

        ---

        ### Next Steps

        **For Human:**
        - Which collection resonates most strongly?
        - Should any concepts bud into dedicated prototyping repos?
        - Priority order for festival submission prep?

        **For Code Agent:**
        - Extract HTML demos from branches into organized `experiments/` directory
        - Create interactive iframe embeddings for web prototypes
        - Build comparison matrix for technical feasibility

        **For Chat Agent:**
        - Identify cross-collection patterns
        - Recommend budding candidates based on momentum
        - Suggest agent collaboration for vertical slice development
        """),
    ])
    return overview_content,


@app.cell
def __(
    bloom_collection_content,
    clockwork_collection_content,
    collection_tabs,
    mo,
    overview_content,
    palimpsest_collection_content,
    pattern_library_content,
):
    # Update tabs with actual content
    tabs_final = mo.ui.tabs({
        "üìä Overview": overview_content,
        "üå∏ Bloom": bloom_collection_content,
        "‚öôÔ∏è Clockwork": clockwork_collection_content,
        "üèõÔ∏è Palimpsest": palimpsest_collection_content,
        "üé® Patterns": pattern_library_content,
    })

    tabs_final
    return tabs_final,


@app.cell
def __(mo):
    mo.md("""
    ---

    ## üå± Garden Navigation

    **Want to explore the raw artifacts?**

    Each collection includes interactive HTML demos showcasing the mechanics:
    - Bloom Collection ‚Üí `experiments/bloom/web/`
    - Clockwork Collection ‚Üí `experiments/clockwork/web_demos/`
    - Palimpsest Collection ‚Üí `experiments/palimpsest/web/`
    - Pattern Library ‚Üí `experiments/patterns/web/`

    _(These will be extracted from branches in the next integration step)_

    ---

    ## üöÄ Provenance & Evolution

    **Created:** 2025-09-29
    **Purpose:** Unify four parallel Codex explorations into playable gallery
    **Framework:** Literate Garden rapid prototyping greenhouse
    **Status:** Active experiment‚Äîready for enhancement and budding

    **Possible evolution paths:**
    - Bud top concepts into dedicated prototype repos
    - Spawn specialized agents to develop vertical slices
    - Create interactive festival submission materials
    - Build web-based demo kiosk for playtesting

    ---

    ### Collaboration Note

    This gallery demonstrates the **Literate Garden philosophy**:
    - üå± **Playable, not perfect** ‚Äî Interactive showcase over polished docs
    - üåø **Rapid iteration** ‚Äî Unified four branches in single session
    - üå∏ **Budding protocol** ‚Äî Ready to identify graduation candidates
    - üçÇ **Provenance tracking** ‚Äî Clear attribution of each concept's origin
    """)
    return


if __name__ == "__main__":
    app.run()